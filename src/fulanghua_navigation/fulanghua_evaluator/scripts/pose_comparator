#!/usr/bin/env python

##########################################################################
 # Software License Agreement (BSD License)                             #
 #                                                                      #
 # Copyright (c) 2013, Daiki Maekawa and Chiba Institute of Technology. #
 # All rights reserved.                                                 #
 #                                                                      #
 # Redistribution and use in source and binary forms, with or without   #
 # modification, are permitted provided that the following conditions   #
 # are met:                                                             #
 #                                                                      #
 #  * Redistributions of source code must retain the above copyright    #
 #    notice, this list of conditions and the following disclaimer.     #
 #  * Redistributions in binary form must reproduce the above           #
 #    copyright notice, this list of conditions and the following       #
 #    disclaimer in the documentation and/or other materials provided   #
 #    with the distribution.                                            #
 # THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS  #
 # "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT    #
 # LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS    #
 # FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE       #
 # COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,  #
 # INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, #
 # LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER     #
 # CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   #
 # LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN    #
 # ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE      #
 # POSSIBILITY OF SUCH DAMAGE.                                          #
##########################################################################

import rospy

import math
import tf2_ros
import geometry_msgs.msg

if __name__ == '__main__':
    rospy.init_node('pose_comparator', anonymous=True)

    tf_buffer = tf2_ros.Buffer()
    listener = tf2_ros.TransformListener(tf_buffer)

    base_frame = rospy.get_param('~base_frame', 'world')
    ref_frame = rospy.get_param('~reference_frame')
    target_frame = rospy.get_param('~target_frame')
    update_rate = rospy.get_param('~update_rate', 10.0)
    alpha = rospy.get_param('~alpha', 0.1)

    ref_pose_pub = rospy.Publisher('ref_pose', geometry_msgs.msg.PoseStamped, queue_size=10)
    target_pose_pub = rospy.Publisher('target_pose', geometry_msgs.msg.PoseStamped, queue_size=10)
    
    rate = rospy.Rate(update_rate)
    
    means = [0.0] * 3
    sigma2_xyz = [0.0] * 3
    
    while not rospy.is_shutdown():
        try:
            ref_trans = tf_buffer.lookup_transform(ref_frame, base_frame, rospy.Time())
            target_trans = tf_buffer.lookup_transform(target_frame, base_frame, rospy.Time())

        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
            rate.sleep()
            continue

        errors = (target_trans.transform.translation.x - ref_trans.transform.translation.x,
                  target_trans.transform.translation.y - ref_trans.transform.translation.y,
                  target_trans.transform.translation.z - ref_trans.transform.translation.z)

        for i in range(3):
            sigma2_xyz[i] = (1 - alpha) * sigma2_xyz[i] + alpha * (1 - alpha) * (errors[i] - means[i]) ** 2
            means[i] = (1 - alpha) * means[i] + alpha * errors[i]
        
        print "RESULTS : for [%s to %s] and [%s to %s]"  % (base_frame, ref_frame, base_frame, target_frame)
        print "mean[x, y, z] = (%.4f, %.4f, %.4f)" % (means[0], means[1], means[2])
        print "stddev[x, y, z] = (%.4f, %.4f, %.4f)" % (math.sqrt(sigma2_xyz[0]), math.sqrt(sigma2_xyz[1]), math.sqrt(sigma2_xyz[2]))

        stamp = rospy.get_rostime()
        ref_pose = geometry_msgs.msg.PoseStamped()
        target_pose = geometry_msgs.msg.PoseStamped()
        ref_pose.header.stamp = stamp
        ref_pose.header.frame_id = base_frame
        target_pose.header.stamp = stamp
        target_pose.header.frame_id = base_frame

        ref_pose.pose.position = ref_trans.transform.translation
        ref_pose.pose.orientation = ref_trans.transform.rotation
        target_pose.pose.position = target_trans.transform.translation
        target_pose.pose.orientation = target_trans.transform.rotation
        
        ref_pose_pub.publish(ref_pose)
        target_pose_pub.publish(target_pose)

        rate.sleep()

